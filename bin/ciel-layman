#!/bin/bash

###################################
# Initialization
###################################
if [[ "$DEBUG" == "y" ]]; then
    FSPREFIX="$PWD/example-fs"
fi

### Constants & Variables
VAR_VERSION="0.1.0-pre1"
DISTRO_LISTJSONPATH="${FSPREFIX}/etc/ciel-layman/distro-overlays-dict.json"
DISTRO_LISTJSONTEXT="$(cat $DISTRO_LISTJSONPATH)"




###################################
# Detect dependencies
###################################
for MYDEP in jq; do
    if [[ "$(which $MYDEP)" != "/"* ]]; then
        echo "[ERROR] Dependency $MYDEP is not satisfied. Aborting."
        exit 1
    fi
done
# echo "[INFO] Dependencies are satisfied. Good."




###################################
# Lib functions
###################################
function _getOverlayAttr() {
    OVERLAY_NAME="$1"
    ATTR="$2"
    RESULT="$(echo $DISTRO_LISTJSONTEXT | jq .$OVERLAY_NAME.$ATTR)"
    echo "${RESULT//\"/}"
}





###################################
# Internal instructions
###################################
function ii_printOverlayDetail() {
    OVERLAY_NAME="$1"
    MAINTAINERSARR="$(_getOverlayAttr $OVERLAY_NAME maintainers)"
    echo "* $OVERLAY_NAME"
    echo "    Maintainers     ${MAINTAINERSARR//,/ \/ }"
    echo "    Description     $(_getOverlayAttr $OVERLAY_NAME description)"
    echo "    Homepage        $(_getOverlayAttr $OVERLAY_NAME homepage)"
    echo ""
}
function ii_getDistroOverlays() {
    cat $FSPREFIX/etc/ciel-layman/distro-overlays
}
function ii_getClonedOverlays() {
    cat $FSPREFIX/etc/ciel-layman/cloned-overlays
}
function ii_syncOverlay() {
    echo "Syncrhonizing overlay '$1' from '$(_getOverlayAttr $1 syncUri)'..."
    echo "Done."
    echo ""
}










###################################
# Subcommand implementations
###################################
function sc_help() {
    echo 'Ciel-Layman help'
    echo ''
    echo 'Subcommands:'
    echo ''
    echo '    help                  Show this help message.'
    echo '    version               Print version.'
    echo '    lsall                 Print list of known overlays.'
    echo '    clone REPO1,REPO2     Clone selected overlays to local machine.'
    echo '    rm REPO1,REPO2        Remove overlays from local machine.'
    echo '    ls                    Print list of cloned overlays.'
    echo '    sync                  Pull all cloned overlays.'
    echo '    sync REPO1,REPO2      Pull selected overlays.'
    echo '    which PKG_NAME        List of overlays which have patches for a package.'
    echo '    use PKG_NAME REPO1,REPO2      Register overlays for a package.'
    echo '    unuse PKG_NAME REPO1,REPO2    Un-register overlays for a package.'
    echo '    perpare PKG_NAME      Test if there is any conflict for the package among'
    echo '                              its registered overlays.'
    echo '    perpare PKG_NAME      Apply patches for a package from overlays into the TREE.'
    echo '    stash                 Run `git stash` in the TREE'
    echo ''
}
function sc_version() {
    echo "Ciel-Layman version ${VAR_VERSION}"
}
function sc_lsall() {
    for OVERLAY_NAME in $(ii_getDistroOverlays); do
        ii_printOverlayDetail {${OVERLAY_NAME}}
    done
}
function sc_clone() {
    # REPO=$1
    echo "Cloning overlay '$1' into '/var/db/ciel-layman-overlays/$1'..."
    echo "Clone completed."
}
function sc_rm() {
    echo "Removing overlay '$1' from '/var/db/ciel-layman-overlays/$1'..."
    echo "Overlay removed."
}
function sc_ls() {
    for OVERLAY_NAME in $(ii_getClonedOverlays); do
        ii_printOverlayDetail "${OVERLAY_NAME}"
    done
}
function sc_sync() {
    # REPOS=$1
    if [[ -z $1 ]]; then
        for OVERLAY_NAME in $(ii_getClonedOverlays); do
            ii_syncOverlay "${OVERLAY_NAME}"
        done
    else
        echo -e "Starting to synchronize 1 overlays...\n" >&2
        ii_syncOverlay "$1"
    fi
    echo "All overlays have been synchronized. No error found."
}
function sc_which() {
    # PKGNAME=$1
    echo -e "The following overlays offer patches for '$1':\n" >&2
    echo "'Neruthes' offers 2 patches:"
    echo "    0301-gnupg-bug.patch"
    echo "    0305-cve-2021-003.patch"
    echo ""
    echo "'example' offers 3 patches:"
    echo "    0003-lighttpd-bug.patch"
    echo "    0305-cve-2020-063.patch"
    echo "    0333-cve-2021-102.patch"
}
function sc_use() {
    # PKGNAME=$1 REPOS=$2
    echo "Registered '$2' for package '$1'."
    echo "Currently using overlays for this package:"
    echo "    Neruthes"
    echo "    example"
}
function sc_unuse() {
    # PKGNAME=$1 REPOS=$2
    echo "Un-registered '$2' for package '$1'."
    echo "Currently using overlays for this package:"
    echo "    example"
}
function sc_prepare() {
    # PKGNAME=$1
    echo "Preparing patches for '$1'..."
    echo "Found Ciel workspace at '/var/cielroot-layman'."
    echo "Found Ciel instance at 'ciel-layman-main'."
    echo "Using 2 overlays for '$1':"
    echo "    Neruthes"
    echo "    example"
    echo ""
    echo "Git repo clean; no need to stash."
    echo "Applying patches..."
    echo "    0301-gnupg-bug.patch"
    echo "    0305-cve-2021-003.patch"
    echo "    0003-lighttpd-bug.patch"
    echo "    0305-cve-2020-063.patch"
    echo "    0333-cve-2021-102.patch"
    echo ""
    echo "Applied 5 patches; no conflict found."
    echo ""
    echo "Successfully prepard patches. No error found."
    echo ""
    echo "Now you may safely build the package with:"
    echo ""
    echo "    cd /var/cielroot-layman && ciel build -i ciel-layman-main $1"
    echo ""
    echo "Good luck!"
}











###################################
# Main
###################################

case $1 in
    help|version|lsall|clone|rm|ls|sync|which|use|unuse|prepare )
        sc_$1 $2 $3 $4 $5 $6
        ;;
    * )
        sc_help
        ;;
esac